{"version":3,"sources":["components/ImagePicker.tsx","pages/NewMemories.tsx"],"names":["Camera","Plugins","ImagePicker","props","useState","takenPhoto","setTakenPhoto","filePickerRef","useRef","openFilePicker","current","click","takePhotoHandler","a","Capacitor","isPluginAvailable","getPhoto","resultType","CameraResultType","Uri","source","CameraSource","quality","width","photo","webPath","photoPicked","path","preview","onImagePicker","Fragment","className","src","alt","fill","onClick","icon","camera","slot","type","hidden","ref","onChange","event","file","target","files","fr","FileReader","onload","undefined","result","toString","readAsDataURL","NewMemories","memoryType","setMemoryType","memoriesCtx","useContext","MemoriesContext","titleRef","history","useHistory","addMemoryHandler","enteredTitle","value","length","addMemory","goBack","replace","defaultHref","position","onIonChange","selectedMemoryType","detail"],"mappings":"0OAkBQA,G,OAAWC,IAAXD,QAiFOE,EA7EV,SAACC,GAAW,IAAD,EACsBC,qBADtB,mBACPC,EADO,KACKC,EADL,KAGRC,EAAgBC,iBAAyB,MAEzCC,EAAiB,WAAO,IAAD,EAC3B,UAAAF,EAAcG,eAAd,SAAuBC,SAiBnBC,EAAgB,uCAAG,8BAAAC,EAAA,yDAClBC,IAAUC,kBAAkB,UADV,uBAErBN,IAFqB,mDAODT,EAAOgB,SAAS,CAClCC,WAAYC,IAAiBC,IAC7BC,OAAQC,IAAarB,OACrBsB,QAAS,GACTC,MAAO,MAXY,WAOfC,EAPe,SAcNA,EAAMC,QAdA,iDAkBfC,EAAqB,CACzBC,KAAMH,EAAMG,KACZC,QAASJ,EAAMC,SAGjBnB,EAAcoB,GACdvB,EAAM0B,cAAcH,GAxBC,kDA0BrBjB,IA1BqB,0DAAH,qDAkCtB,OACE,kBAAC,IAAMqB,SAAP,KACE,yBAAKC,UAAU,kBACX1B,GAAc,6CACfA,GAAc,yBAAK2B,IAAK3B,EAAWuB,QAASK,IAAI,aAEnD,kBAAC,IAAD,CAAWC,KAAK,QAAQC,QAASvB,GAC/B,kBAAC,IAAD,CAASwB,KAAMC,IAAQC,KAAK,UAC5B,kBAAC,IAAD,oBAEF,2BACEC,KAAK,OACLC,QAAM,EACNC,IAAKlC,EACLmC,SA9DkB,SAACC,GACvB,IAAMC,EAAOD,EAAME,OAAQC,MAAO,GAC5BC,EAAK,IAAIC,WACfD,EAAGE,OAAS,WACV,IAAMzB,EAAe,CACnBG,UAAMuB,EACNtB,QAASmB,EAAGI,OAAQC,YAEtB9C,EAAckB,GACdrB,EAAM0B,cAAcL,IAEtBuB,EAAGM,cAAcT,QCiENU,UAjFe,WAAO,IAAD,EACElD,qBADF,mBAC3BC,EAD2B,KACfC,EADe,OAEEF,mBAAyB,QAF3B,mBAE3BmD,EAF2B,KAEfC,EAFe,KAI5BC,EAAcC,qBAAWC,KACzBC,EAAWpD,iBAA4B,MACvCqD,EAAUC,cAMVC,EAAgB,uCAAG,8BAAAlD,EAAA,0DACjBmD,EADiB,UACFJ,EAASlD,eADP,aACF,EAAkBuD,QAIF,IAAnCD,EAAaZ,WAAWc,QACvB7D,GACAkD,EAPoB,iDAYvBE,EAAYU,UACV9D,EACA2D,EAAaZ,WACbG,GAEFM,EAAQK,OAAS,EAAIL,EAAQO,SAAWP,EAAQQ,QAAQ,kBAjBjC,2CAAH,qDAyBtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAY/B,KAAK,SACf,kBAAC,IAAD,CAAegC,YAAY,oBAE7B,kBAAC,IAAD,uBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,SAAS,YAAnB,gBACA,kBAAC,IAAD,CAAUhC,KAAK,OAAOE,IAAKmB,OAIjC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWY,YA3BK,SAAC7B,GAC3B,IAAM8B,EAAqB9B,EAAM+B,OAAOT,MACxCT,EAAciB,IAyByCR,MAAOV,GAClD,kBAAC,IAAD,CAAiBU,MAAM,QAAvB,eACA,kBAAC,IAAD,CAAiBA,MAAM,OAAvB,iBAIN,kBAAC,IAAD,CAAQlC,UAAU,mBAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAaF,cA3DA,SAACL,GACxBlB,EAAckB,QA6DR,kBAAC,IAAD,CAAQO,UAAU,kBAChB,kBAAC,IAAD,CAAQA,UAAU,mBAChB,kBAAC,IAAD,CAAWI,QAAS4B,GAApB","file":"static/js/9.99913510.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { IonButton, IonIcon, IonLabel } from \"@ionic/react\";\nimport { camera } from \"ionicons/icons\";\n\nimport {\n  Plugins,\n  CameraResultType,\n  CameraSource,\n  Capacitor,\n} from \"@capacitor/core\";\n\nimport \"./ImagePicker.css\";\n\nexport interface Photo{\n  path: string | undefined; \n  preview: string \n}\n\nconst { Camera } = Plugins;\n\nconst ImagePicker: React.FC<{\n  onImagePicker: (photo: Photo) => void;\n}> = (props) => {\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\n\n  const filePickerRef = useRef<HTMLInputElement>(null);\n\n  const openFilePicker = () => {\n    filePickerRef.current?.click();\n  };\n\n  const pickFileHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target!.files![0];\n    const fr = new FileReader();\n    fr.onload = () => {\n      const photo: Photo = {\n        path: undefined,\n        preview: fr.result!.toString(),\n      };\n      setTakenPhoto(photo);\n      props.onImagePicker(photo);\n    };\n    fr.readAsDataURL(file);\n  };\n\n  const takePhotoHandler = async () => {\n    if (!Capacitor.isPluginAvailable(\"Camera\")) {\n      openFilePicker();\n      return;\n    }\n\n    try {\n      const photo = await Camera.getPhoto({\n        resultType: CameraResultType.Uri,\n        source: CameraSource.Camera,\n        quality: 80,\n        width: 500,\n      });\n\n      if (!photo || !photo.webPath) {\n        return;\n      }\n\n      const photoPicked: Photo = {\n        path: photo.path,\n        preview: photo.webPath,\n      };\n\n      setTakenPhoto(photoPicked);\n      props.onImagePicker(photoPicked);\n    } catch (error) {\n      openFilePicker();\n    }\n\n    /*     if (!photo || !photo.path || !photo.webPath) {\n      return;\n    } */\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"image-preview\">\n        {!takenPhoto && <h3>no photo yet!</h3>}\n        {takenPhoto && <img src={takenPhoto.preview} alt=\"Preview\" />}\n      </div>\n      <IonButton fill=\"clear\" onClick={takePhotoHandler}>\n        <IonIcon icon={camera} slot=\"start\" />\n        <IonLabel>Take Photo</IonLabel>\n      </IonButton>\n      <input\n        type=\"file\"\n        hidden\n        ref={filePickerRef}\n        onChange={pickFileHandler}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default ImagePicker;\n","import React, { useState, useRef, useContext } from \"react\";\nimport {\n  IonPage,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonButtons,\n  IonBackButton,\n  IonButton,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonSelect,\n  IonSelectOption,\n} from \"@ionic/react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport MemoriesContext from \"../data/memories-context\";\nimport ImagePicker from \"../components/ImagePicker\";\nimport {Photo} from '../components/ImagePicker';\n\n\nconst NewMemories: React.FC = () => {\n  const [takenPhoto, setTakenPhoto] = useState<Photo>();\n  const [memoryType, setMemoryType] = useState<\"Good\" | \"Bad\">(\"Good\");\n\n  const memoriesCtx = useContext(MemoriesContext);\n  const titleRef = useRef<HTMLIonInputElement>(null);\n  const history = useHistory();\n\n  const photoPickHandler = (photo: Photo) => {\n    setTakenPhoto(photo);\n  };\n\n  const addMemoryHandler = async () => {\n    const enteredTitle = titleRef.current?.value;\n\n    if (\n      !enteredTitle ||\n      enteredTitle.toString().length === 0 ||\n      !takenPhoto ||\n      !memoryType\n    ) {\n      return;\n    }\n\n    memoriesCtx.addMemory(\n      takenPhoto,\n      enteredTitle.toString(),\n      memoryType\n    );\n    history.length > 0 ? history.goBack() : history.replace(\"/good-memories\");\n  };\n\n  const selectMemoryHandler = (event: CustomEvent) => {\n    const selectedMemoryType = event.detail.value;\n    setMemoryType(selectedMemoryType);\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonButtons slot=\"start\">\n            <IonBackButton defaultHref=\"/good-memories\" />\n          </IonButtons>\n          <IonTitle>New Memories</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonGrid>\n          <IonRow>\n            <IonCol>\n              <IonItem>\n                <IonLabel position=\"floating\">Memory Title</IonLabel>\n                <IonInput type=\"text\" ref={titleRef}></IonInput>\n              </IonItem>\n            </IonCol>\n          </IonRow>\n          <IonRow>\n            <IonCol>\n              <IonSelect onIonChange={selectMemoryHandler} value={memoryType}>\n                <IonSelectOption value=\"Good\">Good Memory</IonSelectOption>\n                <IonSelectOption value=\"Bad\">Bad Memory</IonSelectOption>\n              </IonSelect>\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-text-center\">\n            <IonCol>\n              <ImagePicker onImagePicker={photoPickHandler} />\n            </IonCol>\n          </IonRow>\n          <IonRow className=\"ion-margin-top\">\n            <IonCol className=\"ion-text-center\">\n              <IonButton onClick={addMemoryHandler}>Add Memory</IonButton>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default NewMemories;\n"],"sourceRoot":""}